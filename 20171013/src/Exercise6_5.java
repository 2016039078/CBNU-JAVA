
public class Exercise6_5 {
	int x=0, y=0; // Marine의 위치좌표(x,y)
	int hp = 60; // 현재 체력
	static int weapon = 6; // 공격력
	static int armor = 0; // 방어력
	static void weaponUp() {
	weapon++;
	}
	static void armorUp() {
	armor++;
	}
	void move(int x, int y) {
	this.x = x; // this.x는 인스턴스 변수, x는 지역변수
	this.y = y; // this.y는 인스턴스 변수, y는 지역변수
	}
/*답 : weapon, armor : 모든  marine 인스턴스에 대해 값은 값이어야 하기 떄문에 static을 붙인다.
 * weponUp(), armorUp() : static 변수에 대한 작업을 하는 메소드이기 때문에 static을 붙인다.*/
}
/*
 [6-10] 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오) (b,e)
a. 모든 생성자의 이름은 클래스의 이름과 동일해야한다.
b. 생성자는 객체를 생성하기 위한 것이다.
c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
d. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.
e. 생성자는 오버로딩 할 수 없다.
->객체를 생성하는 것은 new연산자, 생성사도 오버로딩이 가능
[6-11] 다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오) (b)
a. 객체 자신을 가리키는 참조변수이다.
b. 클래스 내에서라면 어디서든 사용할 수 있다.
c. 지역변수와 인스턴스변수를 구별할 때 사용한다.
d. 클래스 메서드 내에서는 사용할 수 없다.
->클래스 멤버에는 사용할수없음
[6-12] 다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오) (c,d)
a. 메서드의 이름이 같아야 한다.
b. 매개변수의 개수나 타입이 달라야 한다.
c. 리턴타입이 달라야 한다.
d. 매개변수의 이름이 달라야 한다.
->리턴타입은 오버로딩에 영향을 주지 못함
 */
 